import ROOT
import math

"""These helper functions implement three commonly used functionalities:
The Object Selection Helpers represent standard object selections that serve as a starting point for
self defined object selection strategies.
The selectAndSortContainer function can be used to do selecting and sorting in a one liner.
The StandardEventCuts function implements three standard cuts used in essentially all analyses.
"""


# Object Selection Helpers
def isGoodLepton(Lepton):
    if (abs(Lepton.pdgId()) == 11 and isGoodElectron(Lepton)): return True;
    if (abs(Lepton.pdgId()) == 13 and isGoodMuon(Lepton)): return True;
    return False;
    
def isGoodElectron(Lepton):
    if not Lepton.isTight(): return False
    if not Lepton.pt() > 25: return False
    if not Lepton.isoetconerel20() < 0.15: return False
    if not Lepton.isoptconerel30() < 0.15: return False
    return True;
    
def isGoodMuon(Lepton):
    if not Lepton.isTight(): return False
    if not Lepton.pt() > 25: return False
    if not Lepton.isoetconerel20() < 0.15: return False
    if not Lepton.isoptconerel30() < 0.15: return False
    return True;
    
def isGoodJet(jet):
    if jet.pt() < 25: return False
    if abs(jet.eta()) > 2.5: return False
    if jet.pt() < 50 and abs(jet.eta()) < 2.4 and jet.jvt() < 0.5: return False
    return True

# Utility function
def selectAndSortContainer(container, selectingFunction, sortingFunction):
    selectedContainer = [particle for particle in container if selectingFunction(particle)]
    return sorted(selectedContainer, key=sortingFunction, reverse=True)

# Event Selection Helpers
def StandardEventCuts(eventinfo):
    if not (eventinfo.triggeredByElectron() or eventinfo.triggeredByMuon()): return False
    if not eventinfo.passGRL(): return False
    if not eventinfo.hasGoodVertex(): return False
    return True;
    
    
# Variable Definitions:
def WTransverseMass(lepton, etmiss):
    return math.sqrt(2*lepton.pt()*etmiss.et()*(1-math.cos(lepton.tlv().DeltaPhi(etmiss.tlv()))));


# Reconstructed top mass single top events t-channel:
def SingleTopMassSebas(lepton, etmiss, bjet):
    WMass = 80.4
    alpha = 0.5*(math.pow(WMass,2)-math.pow(lepton.tlv().M(),2))
    beta = lepton.tlv().Px() * math.cos(etmiss.phi()) + lepton.tlv().Py() * math.sin(etmiss.phi())
    mu = alpha + beta*etmiss.et()
    b = (2*mu*lepton.tlv().Pz())/(math.pow(lepton.tlv().E(),2)-math.pow(lepton.tlv().Pz(),2))
    c = ((math.pow(lepton.tlv().E(),2)*math.pow(etmiss.et(),2)) - mu*mu)/(math.pow(lepton.tlv().E(),2)-math.pow(lepton.tlv().Pz(),2))
    Delta = (b*b)-(4*c)

    mtop = 0
    pzneu = 0
    pzneu1 = 0
    pzneu2 = 0
    eneu=0

    if Delta == 0 :
        pzneu = -b/2
    elif Delta > 0:
        pzneu1 = (-b+math.sqrt(Delta))/2
        pzneu2 = (-b-math.sqrt(Delta))/2
        if abs(pzneu1)<abs(pzneu2):
            pzneu=pzneu1
        else:
            pzneu=pzneu2
    else:
        pass

    pneutrino = ROOT.TLorentzVector()

    if Delta >=0:
        eneu = math.sqrt(math.pow(etmiss.tlv().Px(),2)+math.pow(etmiss.tlv().Py(),2)+math.pow(pzneu,2))
        pneutrino.SetPxPyPzE(etmiss.tlv().Px(),etmiss.tlv().Py(),pzneu,eneu)
        mtop=(pneutrino+lepton.tlv()+bjet.tlv()).M()
    else:
        mtop=0

    return mtop; 

    

